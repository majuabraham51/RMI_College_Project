/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.edw.main;

import com.edw.rmi.ClientImplement;
import com.edw.rmi.ClientReqProcess;
import com.edw.rmi.Message;
import java.awt.AWTException;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;

/**
 *
 * @author Admin
 */
public class ClientHome extends javax.swing.JFrame {

    /**
     * Creates new form ClientHome
     */
    public static Process oldprocess;
    public static String IpIp;
    
    public static Vector<String> v_old1;
    public static String Name_nn;
    static Process oldpr;
   public static ArrayList<String> newopenprocess=new ArrayList<String>();
    String OldExe;
     JDialog oo = new JDialog();
    Message impl;
    ProcessManagement pm;
     Chat_window cv = new Chat_window();
    int i = 0;
    private static final String KILL = "taskkill /IM ";

    public ClientHome() {
        initComponents();



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Student Home");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("Ip-Address");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setText("Your Name");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(0, 102, 51));
        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 51));
        jLabel4.setText("Roll No");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(jTextField3)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String ip = jTextField1.getText();
        IpIp = ip;

        //jTextField1.getText();
        String U_name = jTextField2.getText();
        Name_nn = U_name;
         ProcessReq ox=new ProcessReq();
            
         ox.show();

        try {
            // fire to localhost port 1099
            Registry myRegistry = LocateRegistry.getRegistry(ip, 1099);

            startClientServer();

            // search for myMessage service
           impl = (Message) myRegistry.lookup("myMessage");

            // call server's method	

            InetAddress addr = InetAddress.getLocalHost();
            String ipAddress = addr.getHostAddress();
            impl.sayHello(ipAddress, U_name);
            String chck = impl.Connection("haiii");
           // System.out.println(chck);

            String modchk = impl.ChangeUserMode();
             Process _old = TaskList();
                BufferedReader oldbr =
                    new BufferedReader(new InputStreamReader(_old.getInputStream()));
                v_old1 = new Vector<String>();
                String oldP = "";
              
                 while ((oldP = oldbr.readLine()) != null) {
                
                String OldExeee = getProcessName(oldP);
                
                
                
                v_old1.add(OldExeee);
                 //System.out.println("kkkkkkkkkkkkkkkkkkkkkkkkkkkk");
                 
//                for(ClientReqProcess l:ClientImplement.reqproc){
//                    if("Granted".equals(l.status))
//                    {
//                        v_old1.add(l.proc);
//                        System.out.println(l.proc+"  "+l.status);
//
//                    }
//                    
//                }

            }
                 
            
            
            
            if (modchk.equals("Training")) {
                System.out.println(modchk + " --Session");
               Detect_Usb sdg=new Detect_Usb();
                
                
                killrunningprocess();
                FileSHare oooo=new FileSHare();
oooo.show();
              
//                String chxx = impl.Chatwindow();

//                if (chxx.equals("first")) {
//                    Chat_window cv = new Chat_window();
//                    cv.show();
//                }

            } else {
                System.out.println(modchk + " --Session--");
                TrainingSession obt = new TrainingSession(impl);

                //   RenderedImage rm= impl.grtimage();
              
                Detect_Usb sdg = new Detect_Usb();
                


                System.out.println("Message Sent");
                
                
                   

                killrunningprocess();
                
               
            }



//            ImageIcon oo = new ImageIcon();
//            oo = getClient_imageicon();
//            impl.getClient_imageicon(oo);


        } catch (Exception e) {
             oo.setTitle("From client Trainingxxxxxxxxx"+e.getMessage());
                        oo.show();
            e.printStackTrace();
            
              }
        dispose();


    }//GEN-LAST:event_jButton1ActionPerformed
    public void killrunningprocess() throws Exception {
        Thread td;
        final Runtime r=Runtime.getRuntime();
        //pm = new ProcessManagement();

        Runnable ss = new Runnable() {

            @Override
            public void run() {
                
                while (true) {

                    
                    try {
                        
                        
                  AtomicBoolean on_offCHAT = impl.get_ChatBoolean();
                  
                
                    if (on_offCHAT.get() == true)
                        
                    {
                       
                    //cv.show();
                    if(!cv.isActive())
                    {
                        
                       cv.show();   
                    }
                      
                        
                    }
                    else
                    {
                        cv.dispose();
                        
                    }
                    String offf=impl.turnOff();
                   
                    if(offf!=null)
                    {
                        if(offf.equals("Turnnofpc"))
                        {
                            System.out.println("cHECKING if pc is shut down remotly");
                            r.exec("shutdown -s -t 60");
                           
                        }
                        
                    }
                        
                        
                        
                        
                        Process newpr = TaskList();



                        KillProcess( newpr);


                    } catch (IOException ex) {
                         
                        Logger.getLogger(ClientHome.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    

                }
            }
        };
        td = new Thread(ss);
        td.start();
    }

    public Process TaskList() throws IOException {

        Process pr = Runtime.getRuntime().exec("tasklist");
        return pr;


    }

    public ImageIcon getClient_imageicon() throws RemoteException {
        try {

            Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
            BufferedImage capture;

            capture = new Robot().createScreenCapture(screenRect);
            return new ImageIcon(capture);
        } catch (AWTException ex) {

            return new ImageIcon();
        }


    }

    public void KillProcess( Process _onew) {
        try {
            boolean flag = true;
            //String processName = "notepad.exe";
            //Process _old = ClientHome.oldprocess;
Process _new = TaskList();

InetAddress addr = InetAddress.getLocalHost();
            String ipAddress = addr.getHostAddress();
            
            // System.out.println("JUST ***********cHECKING");

            // ArrayList<String> list = new ArrayList<String>();
            BufferedReader newbr =
                    new BufferedReader(new InputStreamReader(_new.getInputStream()));
//            BufferedReader oldbr =
//                    new BufferedReader(new InputStreamReader(_old.getInputStream()));
//            //System.out.println("...." + newbr);
            Vector<String> v_new1 = new Vector<String>();

            String newP = "";
            while ((newP = newbr.readLine()) != null) {
                
                String NewExeee = getProcessName(newP);
if(!NewExeee.equals("taskkill.exe"))
{
     v_new1.add(NewExeee);
}
   
               
//                boolean c = v_old1.contains("csrss.exe");
//                System.out.println("Does Vector contain Newwwwwwww  ? " + c);
//               
 
                
            }
            
            Iterator newvItr = v_new1.iterator(); 
            Iterator oldvvv = v_old1.iterator(); 
            
//            System.out.print("\tnew  process soze "+v_new1.size()); 
//            
//             System.out.print("\nold process size "+v_old1.size()); 
//                  
            try
            {
                
         
           
           
            while(newvItr.hasNext()) 
                {
                    String bb=newvItr.next().toString();
                    
                    
                     int sizz=ClientImplement.reqproc.size();
                
                     
                      //System.out.println("newwwwwwwwwwwwwwwwwwwwwwwww   size "+sizz);
                    
                    if(!v_old1.contains(bb) )
                    {
                        System.out.print(" \nnew process is\t"+bb); 
                        if(!newopenprocess.contains(bb))
                        {
                            newopenprocess.add(bb);
                            
                        }
                        
                        Runtime.getRuntime().exec(KILL + bb);
                    
                    }
                    if(sizz!=0)
                    {
                         for(ClientReqProcess l:ClientImplement.reqproc)
                         {
                              if("Granted".equals(l.status)&&ipAddress.equals(l.ip))
                              {
                                 // System.out.print(" eheeeeeeee\n"); 
                                  boolean s=v_old1.contains(l.proc);
                                  if(s==false)
                                  {
                                      v_old1.add(l.proc);
                                      
                                  }
                                   
                                   
                              }
                         }
                        
                    }
                    String oh=impl.Allow_all();
                    if(oh==null)
                    {
                       
                    }
                    else
                    {
                          boolean dds=v_old1.contains(oh);
                          if(dds==false)
                          {
                             // System.out.print(" NEW pROGRAM added "+oh); 
                              oo.setTitle(" NEW pROGRAM added "+oh);
                              oo.show();
                             
                               v_old1.add(oh);
                              
                          }
                         
                       
                    }
                    String ohk=impl.Remove_all();
                    if(ohk==null)
                    {
                        
                    }
                     else
                    {
                         boolean dlds=v_old1.contains(ohk);
                         if(dlds==true)
                         {
                             v_old1.removeElement(ohk);
                         }
                    }
                   
                       }
            
}catch(Exception ex)
{
    System.out.println();
    
}


        } catch (IOException ex) {
            Logger.getLogger(ClientHome.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public String getProcessName(String sp) {
        String result = "";
        String[] splist = sp.split(" ");
        for (String s : splist) {
            if (s.endsWith(".exe") || s.endsWith(".EXE") ) {
                
                    
                result = s;
            }
        }

        return result;
    }

    private void startClientServer(){
        try {
            // create on port 1099
            Registry registry1 = LocateRegistry.createRegistry(9001);

            // create a new service named myMessage
            registry1.rebind("myClientMessage", new ClientImplement());
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("--------------ClientServer is ready dear user");
    }

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {


        /*
         *
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ClientHome().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
